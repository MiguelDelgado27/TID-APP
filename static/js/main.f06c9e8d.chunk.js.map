{"version":3,"sources":["assets/images/code.png","constants/numOfQuestions.js","components/Header/index.js","components/Select/index.js","constants/countdownTime.js","components/Main/index.js","components/Loader/index.js","utils/timeConverter.js","components/Result/Stats.js","utils/calculateGrade.js","components/Result/QA.js","components/Result/index.js","components/Countdown/index.js","components/Offline/index.js","utils/getRandomNumber.js","components/Quiz/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","state","promptEvent","appAccepted","window","addEventListener","e","preventDefault","setState","installApp","bind","this","prompt","userChoice","then","result","outcome","isAppInstalled","matchMedia","matches","Menu","stackable","inverted","size","Item","style","color","cursor","position","Button","content","icon","labelPosition","onClick","Component","Select","name","text","options","onChange","Dropdown","fluid","selection","placeholder","value","NUM_OF_QUESTIONS","i","object","key","push","COUNTDOWN_TIME","Main","category","numOfQ","difficulty","type","time","setValue","allFieldsSelected","selectedValues","Container","Segment","Group","divided","Image","src","codeImg","Content","Divider","Meta","Extra","primary","startQuiz","disabled","Loader","Message","Icon","loading","timeConverter","milliseconds","hours","Math","floor","slice","minutes","seconds","Stats","totalQuestions","correctAnswers","timeTakesToComplete","retakeQuiz","backToHome","score","Number","toFixed","percentage","parseInt","grade","remarks","calculateGrade","totalTime","timerTime","as","textAlign","block","marginTop","marginRight","marginBottom","QA","questionsAndAnswers","Table","celled","striped","Row","HeaderCell","Body","map","item","Cell","question","user_answer","correct_answer","point","Result","activeTab","handleTabClick","widths","active","Countdown","countdownTime","timerStart","timer","setInterval","newTime","clearInterval","Swal","fire","title","onClose","timesUp","startTimer","timeAmount","basic","floated","Popup","trigger","Offline","getRandomNumber","min","max","ceil","random","Quiz","quizData","isLoading","questionIndex","userSlectedAns","quizIsCompleted","isOffline","undefined","setData","handleItemClick","handleNext","renderResult","startNewQuiz","resolveError","API","fetch","respone","json","setTimeout","catch","error","navigator","onLine","results","length","html","outPut","incorrect_answers","splice","he","decode","resultRef","floating","Description","vertical","option","letter","decodedOption","App","isQuizStart","PATH_BASE","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","toast","showConfirmButton","onSuccess","console","ReactDOM","render","document","getElementById","URL","process","href","origin","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f06c9e8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/code.60b1b385.png\";","const NUM_OF_QUESTIONS = [];\r\n\r\nfor (let i = 1; i <= 50; i++) {\r\n  const object = { key: i, text: `${i}`, value: i };\r\n  NUM_OF_QUESTIONS.push(object);\r\n}\r\n\r\nexport default NUM_OF_QUESTIONS;\r\n","import React, { Component } from 'react';\r\nimport { Menu, Button } from 'semantic-ui-react';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      promptEvent: null,\r\n      appAccepted: false\r\n    };\r\n\r\n    window.addEventListener('beforeinstallprompt', e => {\r\n      // console.log('Loooging');\r\n\r\n      e.preventDefault();\r\n      this.setState({ promptEvent: e });\r\n    });\r\n\r\n    this.installApp = this.installApp.bind(this);\r\n  }\r\n\r\n  installApp() {\r\n    const { promptEvent } = this.state;\r\n    // console.log('Init Func ==>', promptEvent);\r\n\r\n    promptEvent.prompt();\r\n    promptEvent.userChoice.then(result => {\r\n      if (result.outcome === 'accepted') {\r\n        // console.log('User accepted the A2HS prompt');\r\n        this.setState({ appAccepted: true });\r\n      } else {\r\n        // console.log('User dismissed the A2HS prompt');\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { promptEvent, appAccepted } = this.state;\r\n    let isAppInstalled = false;\r\n\r\n    if (\r\n      window.matchMedia('(display-mode: standalone)').matches ||\r\n      appAccepted\r\n    ) {\r\n      isAppInstalled = true;\r\n    }\r\n\r\n    return (\r\n      <Menu stackable inverted size=\"massive\">\r\n        <Menu.Item>\r\n          <h1\r\n            style={{\r\n              color: '#2185D0',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            The Scrum App\r\n          </h1>\r\n        </Menu.Item>\r\n\r\n        {promptEvent && !isAppInstalled && (\r\n          <Menu.Menu position=\"right\">\r\n            <Menu.Item>\r\n              <Button\r\n                color=\"teal\"\r\n                content=\"Install App\"\r\n                size=\"big\"\r\n                icon=\"app store\"\r\n                labelPosition=\"left\"\r\n                onClick={this.installApp}\r\n              />\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n        )}\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Dropdown } from 'semantic-ui-react';\r\n\r\nconst Select = ({ name, text, options, onChange }) => (\r\n  <Dropdown\r\n    fluid\r\n    selection\r\n    placeholder={text}\r\n    options={options}\r\n    onChange={(e, { value }) => onChange(name, value)}\r\n  />\r\n);\r\n\r\nexport default Select;\r\n","const COUNTDOWN_TIME = [];\r\n\r\nfor (let i = 1; i <= 60; i++) {\r\n  const object = { key: i, text: `${i}`, value: i };\r\n  COUNTDOWN_TIME.push(object);\r\n}\r\n\r\nexport default COUNTDOWN_TIME;\r\n","import React, { Component } from 'react';\r\nimport { Container, Segment, Item, Divider, Button } from 'semantic-ui-react';\r\nimport codeImg from '../../assets/images/code.png';\r\nimport Select from '../Select';\r\nimport {\r\n  CATEGORIES,\r\n  NUM_OF_QUESTIONS,\r\n  DIFFICULTY,\r\n  QUESTIONS_TYPE,\r\n  COUNTDOWN_TIME\r\n} from '../../constants';\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      category: null,\r\n      numOfQ: null,\r\n      difficulty: null,\r\n      type: null,\r\n      time: null\r\n    };\r\n\r\n    this.setValue = this.setValue.bind(this);\r\n  }\r\n\r\n  setValue(name, value) {\r\n    this.setState({ [name]: value });\r\n  }\r\n\r\n  render() {\r\n    const { category, numOfQ, difficulty, type, time } = this.state;\r\n    // console.log(category, numOfQ, difficulty, type, time);\r\n\r\n    let allFieldsSelected = false;\r\n    let selectedValues = null;\r\n\r\n    if ( numOfQ && time) {\r\n      allFieldsSelected = true;\r\n\r\n      selectedValues = {\r\n        numOfQ,\r\n        time\r\n      };\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        <Segment>\r\n          <Item.Group divided>\r\n            <Item>\r\n              <Item.Image src={codeImg} />\r\n              <Item.Content>\r\n                <Item.Header>\r\n                  <h1>Open Trivia Questions</h1>\r\n                </Item.Header>\r\n                <br />\r\n                <Divider />\r\n                <Item.Meta>\r\n                  <Select\r\n                    name=\"numOfQ\"\r\n                    text=\"Select No. of Questions\"\r\n                    options={NUM_OF_QUESTIONS}\r\n                    onChange={this.setValue}\r\n                  />\r\n                  <br />\r\n                  <Select\r\n                    name=\"time\"\r\n                    text=\"Select Countdown Time (In Minutes)\"\r\n                    options={COUNTDOWN_TIME}\r\n                    onChange={this.setValue}\r\n                  />\r\n                </Item.Meta>\r\n                <Divider />\r\n                <Item.Extra>\r\n                  {allFieldsSelected ? (\r\n                    <Button\r\n                      primary\r\n                      content=\"Start Quiz\"\r\n                      onClick={() => this.props.startQuiz(selectedValues)}\r\n                      size=\"big\"\r\n                      icon=\"play\"\r\n                      labelPosition=\"right\"\r\n                    />\r\n                  ) : (\r\n                    <Button\r\n                      disabled\r\n                      primary\r\n                      content=\"Start Quiz\"\r\n                      size=\"big\"\r\n                      icon=\"play\"\r\n                      labelPosition=\"right\"\r\n                    />\r\n                  )}\r\n                </Item.Extra>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n        <br />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Container, Message, Icon } from 'semantic-ui-react';\r\n\r\nconst Loader = ({ text }) => (\r\n  <Container>\r\n    <Message icon size=\"big\">\r\n      <Icon name=\"circle notched\" loading />\r\n      <Message.Content>\r\n        <Message.Header>Just one second</Message.Header>\r\n        {text || 'We are fetching that content for you.'}\r\n      </Message.Content>\r\n    </Message>\r\n  </Container>\r\n);\r\n\r\nexport default Loader;\r\n","const timeConverter = milliseconds => {\r\n  const hours = ('0' + Math.floor((milliseconds / 3600000) % 60)).slice(-2);\r\n  const minutes = ('0' + Math.floor((milliseconds / 60000) % 60)).slice(-2);\r\n  const seconds = ('0' + (Math.floor((milliseconds / 1000) % 60) % 60)).slice(\r\n    -2\r\n  );\r\n\r\n  return {\r\n    hours,\r\n    minutes,\r\n    seconds\r\n  };\r\n};\r\n\r\nexport { timeConverter };\r\n","import React from 'react';\r\nimport { Segment, Header, Button } from 'semantic-ui-react';\r\n\r\nimport { calculateGrade } from '../../utils/calculateGrade';\r\nimport { timeConverter } from '../../utils/timeConverter';\r\n\r\nconst Stats = props => {\r\n  const {\r\n    totalQuestions,\r\n    correctAnswers,\r\n    timeTakesToComplete,\r\n    retakeQuiz,\r\n    backToHome\r\n  } = props;\r\n\r\n  const score = Number(((correctAnswers * 100) / totalQuestions).toFixed(2));\r\n  const { grade, remarks } = calculateGrade(score);\r\n  const { hours, minutes, seconds } = timeConverter(\r\n    timeTakesToComplete.totalTime - timeTakesToComplete.timerTime\r\n  );\r\n\r\n  return (\r\n    <Segment>\r\n      <Header as=\"h1\" textAlign=\"center\" block>\r\n        {remarks}\r\n      </Header>\r\n      <Header as=\"h2\" textAlign=\"center\" block>\r\n        Grade: {grade}\r\n      </Header>\r\n      <Header as=\"h3\" textAlign=\"center\" block>\r\n        Total Questions: {totalQuestions}\r\n      </Header>\r\n      <Header as=\"h3\" textAlign=\"center\" block>\r\n        Correct Answers: {correctAnswers}\r\n      </Header>\r\n      <Header as=\"h3\" textAlign=\"center\" block>\r\n        Your Score: {score}%\r\n      </Header>\r\n      <Header as=\"h3\" textAlign=\"center\" block>\r\n        Passing Score: 60%\r\n      </Header>\r\n      <Header as=\"h3\" textAlign=\"center\" block>\r\n        Time Takes: {`${hours} : ${minutes} : ${seconds}`}\r\n      </Header>\r\n      <div style={{ marginTop: 35 }}>\r\n        <Button\r\n          primary\r\n          content=\"Retake Quiz\"\r\n          onClick={retakeQuiz}\r\n          size=\"big\"\r\n          icon=\"redo\"\r\n          labelPosition=\"right\"\r\n          style={{ marginRight: 15, marginBottom: 8 }}\r\n        />\r\n        <Button\r\n          color=\"teal\"\r\n          content=\"Back to Home\"\r\n          onClick={backToHome}\r\n          size=\"big\"\r\n          icon=\"home\"\r\n          labelPosition=\"right\"\r\n          style={{ marginBottom: 8 }}\r\n        />\r\n      </div>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","const calculateGrade = score => {\r\n  const percentage = parseInt(score);\r\n  let grade = null;\r\n  let remarks = null;\r\n\r\n  if (percentage >= 97) {\r\n    grade = 'A+';\r\n  } else if (percentage >= 93 && percentage <= 96) {\r\n    grade = 'A';\r\n  } else if (percentage >= 90 && percentage <= 92) {\r\n    grade = 'A-';\r\n  } else if (percentage >= 87 && percentage <= 89) {\r\n    grade = 'B+';\r\n  } else if (percentage >= 83 && percentage <= 86) {\r\n    grade = 'B';\r\n  } else if (percentage >= 80 && percentage <= 82) {\r\n    grade = 'B-';\r\n  } else if (percentage >= 77 && percentage <= 79) {\r\n    grade = 'C+';\r\n  } else if (percentage >= 73 && percentage <= 76) {\r\n    grade = 'C';\r\n  } else if (percentage >= 70 && percentage <= 72) {\r\n    grade = 'C-';\r\n  } else if (percentage >= 67 && percentage <= 69) {\r\n    grade = 'D+';\r\n  } else if (percentage >= 63 && percentage <= 66) {\r\n    grade = 'D';\r\n  } else if (percentage >= 60 && percentage <= 62) {\r\n    grade = 'D-';\r\n  } else if (percentage < 60) {\r\n    grade = 'F';\r\n  }\r\n\r\n  if (score >= 60) {\r\n    remarks = 'Congratulations, YOU PASSED!';\r\n  } else {\r\n    remarks = 'Sorry, YOU FAILED!';\r\n  }\r\n\r\n  return {\r\n    grade,\r\n    remarks\r\n  };\r\n};\r\n\r\nexport { calculateGrade };\r\n","import React from 'react';\r\nimport { Table } from 'semantic-ui-react';\r\n\r\nconst QA = ({ questionsAndAnswers }) => (\r\n  <Table celled striped>\r\n    <Table.Header>\r\n      <Table.Row>\r\n        <Table.HeaderCell>No.</Table.HeaderCell>\r\n        <Table.HeaderCell>Questions</Table.HeaderCell>\r\n        <Table.HeaderCell>Your Answers</Table.HeaderCell>\r\n        <Table.HeaderCell>Correct Answers</Table.HeaderCell>\r\n        <Table.HeaderCell>Points</Table.HeaderCell>\r\n      </Table.Row>\r\n    </Table.Header>\r\n    <Table.Body>\r\n      {questionsAndAnswers.map((item, i) => (\r\n        <Table.Row key={i + 1}>\r\n          <Table.Cell>{i + 1}</Table.Cell>\r\n          <Table.Cell>{item.question}</Table.Cell>\r\n          <Table.Cell>{item.user_answer}</Table.Cell>\r\n          <Table.Cell>{item.correct_answer}</Table.Cell>\r\n          <Table.Cell>{item.point}</Table.Cell>\r\n        </Table.Row>\r\n      ))}\r\n    </Table.Body>\r\n  </Table>\r\n);\r\n\r\nexport default QA;\r\n","import React, { Component } from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\n\r\nimport Stats from './Stats';\r\nimport QA from './QA';\r\n\r\nclass Result extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTab: 'Stats'\r\n    };\r\n\r\n    this.handleTabClick = this.handleTabClick.bind(this);\r\n  }\r\n\r\n  handleTabClick(e, { name }) {\r\n    this.setState({ activeTab: name });\r\n  }\r\n\r\n  render() {\r\n    const { activeTab } = this.state;\r\n    const {\r\n      totalQuestions,\r\n      correctAnswers,\r\n      timeTakesToComplete,\r\n      questionsAndAnswers,\r\n      retakeQuiz,\r\n      backToHome\r\n    } = this.props;\r\n\r\n    return (\r\n      <Container>\r\n        <Menu fluid widths={2}>\r\n          <Menu.Item\r\n            name=\"Stats\"\r\n            active={activeTab === 'Stats'}\r\n            onClick={this.handleTabClick}\r\n          />\r\n          <Menu.Item\r\n            name=\"Q / A\"\r\n            active={activeTab === 'Q / A'}\r\n            onClick={this.handleTabClick}\r\n          />\r\n        </Menu>\r\n\r\n        {activeTab === 'Stats' && (\r\n          <Stats\r\n            totalQuestions={totalQuestions}\r\n            correctAnswers={correctAnswers}\r\n            timeTakesToComplete={timeTakesToComplete}\r\n            retakeQuiz={retakeQuiz}\r\n            backToHome={backToHome}\r\n          />\r\n        )}\r\n        {activeTab === 'Q / A' && (\r\n          <QA questionsAndAnswers={questionsAndAnswers} />\r\n        )}\r\n        <br />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react';\r\nimport { Button, Popup } from 'semantic-ui-react';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { timeConverter } from '../../utils/timeConverter';\r\n\r\nclass Countdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const countdownTime = props.countdownTime * 60000;\r\n\r\n    this.state = {\r\n      timerStart: 0,\r\n      timerTime: countdownTime,\r\n      totalTime: countdownTime\r\n    };\r\n  }\r\n\r\n  startTimer() {\r\n    this.timer = setInterval(() => {\r\n      const newTime = this.state.timerTime - 1000;\r\n\r\n      if (newTime >= 0) {\r\n        this.setState({\r\n          timerTime: newTime\r\n        });\r\n      } else {\r\n        clearInterval(this.timer);\r\n        Swal.fire({\r\n          title: 'YOUR TIME IS UP',\r\n          type: 'info',\r\n          timer: 5000,\r\n          onClose: () => {\r\n            this.props.timesUp();\r\n          }\r\n        });\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.startTimer();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n\r\n    const { timerTime, totalTime } = this.state;\r\n    this.props.timeAmount(timerTime, totalTime);\r\n  }\r\n\r\n  render() {\r\n    const { timerTime } = this.state;\r\n    const { hours, minutes, seconds } = timeConverter(timerTime);\r\n\r\n    return (\r\n      <Button.Group size=\"massive\" basic floated=\"right\">\r\n        <Popup\r\n          content=\"Hours\"\r\n          trigger={<Button active>{hours}</Button>}\r\n          position=\"bottom left\"\r\n        />\r\n        <Popup\r\n          content=\"Minutes\"\r\n          trigger={<Button active>{minutes}</Button>}\r\n          position=\"bottom left\"\r\n        />\r\n        <Popup\r\n          content=\"Seconds\"\r\n          trigger={<Button active>{seconds}</Button>}\r\n          position=\"bottom left\"\r\n        />\r\n      </Button.Group>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Countdown;\r\n","import React from 'react';\r\nimport { Container, Segment, Header, Icon } from 'semantic-ui-react';\r\n\r\nconst Offline = () => (\r\n  <Container>\r\n    <Segment placeholder>\r\n      <Header icon>\r\n        <Icon name=\"unlink\" />\r\n        <br />\r\n        It looks like you're offline, Please check your internet connection.\r\n      </Header>\r\n    </Segment>\r\n  </Container>\r\n);\r\n\r\nexport default Offline;\r\n","const getRandomNumber = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nexport { getRandomNumber };\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Container,\r\n  Segment,\r\n  Item,\r\n  Divider,\r\n  Button,\r\n  Icon,\r\n  Message,\r\n  Menu,\r\n  Header\r\n} from 'semantic-ui-react';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport Loader from '../Loader';\r\nimport Result from '../Result';\r\nimport Countdown from '../Countdown';\r\nimport Offline from '../Offline';\r\n\r\nimport he from 'he';\r\nimport { getRandomNumber } from '../../utils/getRandomNumber';\r\n\r\nimport staticQuestions from '../../constants/questionstatic'; \r\n\r\n\r\nclass Quiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      quizData: null,\r\n      isLoading: true,\r\n      questionIndex: 0,\r\n      correctAnswers: 0,\r\n      userSlectedAns: null,\r\n      quizIsCompleted: false,\r\n      questionsAndAnswers: [],\r\n      isOffline: false\r\n    };\r\n\r\n    this.timeTakesToComplete = undefined;\r\n\r\n    this.setData = this.setData.bind(this);\r\n    this.handleItemClick = this.handleItemClick.bind(this);\r\n    this.handleNext = this.handleNext.bind(this);\r\n    this.timesUp = this.timesUp.bind(this);\r\n    this.timeAmount = this.timeAmount.bind(this);\r\n    this.renderResult = this.renderResult.bind(this);\r\n    this.retakeQuiz = this.retakeQuiz.bind(this);\r\n    this.startNewQuiz = this.startNewQuiz.bind(this);\r\n    this.resolveError = this.resolveError.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { API } = this.props;\r\n    // console.log(API);\r\n\r\n    fetch(API)\r\n      .then(respone => respone.json())\r\n      .then(result => setTimeout(() => this.setData(result), 1000))\r\n      .catch(error => setTimeout(() => this.resolveError(error), 1000));\r\n  }\r\n\r\n  resolveError(error) {\r\n    if (!navigator.onLine) {\r\n      // console.log('Connection problem');\r\n      this.setState({ isOffline: true });\r\n    } else {\r\n      // console.log('API problem ==> ', error);\r\n      this.setState({ isOffline: true });\r\n    }\r\n  }\r\n\r\n  setData(results) {\r\n    // console.log(results);\r\n    if (results.length === 0) {\r\n      const message =\r\n        \"The API doesn't have enough questions for your query<br />\" +\r\n        '(ex. Asking for 50 questions in a category that only has 20).' +\r\n        '<br /><br />Please change number of questions, difficulty level ' +\r\n        'or type of questions.';\r\n\r\n      return Swal.fire({\r\n        title: 'Oops...',\r\n        html: message,\r\n        type: 'error',\r\n        timer: 10000,\r\n        onClose: () => {\r\n          this.props.backToHome();\r\n        }\r\n      });\r\n    }\r\n    const quizData = results;\r\n    //const quizData = staticQuestions;\r\n    const { questionIndex } = this.state;\r\n    const outPut = getRandomNumber(0, 3);\r\n    const options = [...quizData[questionIndex].incorrect_answers];\r\n    options.splice(outPut, 0, quizData[questionIndex].correct_answer);\r\n\r\n    this.setState({ quizData, isLoading: false, options, outPut });\r\n  }\r\n\r\n  handleItemClick(e, { name }) {\r\n    this.setState({ userSlectedAns: name });\r\n  }\r\n\r\n  handleNext() {\r\n    const {\r\n      userSlectedAns,\r\n      quizData,\r\n      questionIndex,\r\n      correctAnswers,\r\n      questionsAndAnswers\r\n    } = this.state;\r\n\r\n    let point = 0;\r\n    if (userSlectedAns === he.decode(quizData[questionIndex].correct_answer)) {\r\n      point = 1;\r\n    }\r\n\r\n    questionsAndAnswers.push({\r\n      question: he.decode(quizData[questionIndex].question),\r\n      user_answer: userSlectedAns,\r\n      correct_answer: he.decode(quizData[questionIndex].correct_answer),\r\n      point\r\n    });\r\n\r\n    if (questionIndex === quizData.length - 1) {\r\n      this.setState({\r\n        correctAnswers: correctAnswers + point,\r\n        userSlectedAns: null,\r\n        isLoading: true,\r\n        quizIsCompleted: true,\r\n        questionIndex: 0,\r\n        options: null,\r\n        questionsAndAnswers\r\n      });\r\n      return;\r\n    }\r\n\r\n    const outPut = getRandomNumber(0, 3);\r\n\r\n    const options = [...quizData[questionIndex + 1].incorrect_answers];\r\n    options.splice(outPut, 0, quizData[questionIndex + 1].correct_answer);\r\n\r\n    this.setState({\r\n      correctAnswers: correctAnswers + point,\r\n      questionIndex: questionIndex + 1,\r\n      userSlectedAns: null,\r\n      options,\r\n      outPut,\r\n      questionsAndAnswers\r\n    });\r\n  }\r\n\r\n  timesUp() {\r\n    this.setState({\r\n      userSlectedAns: null,\r\n      isLoading: true,\r\n      quizIsCompleted: true,\r\n      questionIndex: 0,\r\n      options: null\r\n    });\r\n  }\r\n\r\n  timeAmount(timerTime, totalTime) {\r\n    this.timeTakesToComplete = {\r\n      timerTime,\r\n      totalTime\r\n    };\r\n  }\r\n\r\n  renderResult() {\r\n    setTimeout(() => {\r\n      const { quizData, correctAnswers, questionsAndAnswers } = this.state;\r\n      const { backToHome } = this.props;\r\n\r\n      const resultRef = (\r\n        <Result\r\n          totalQuestions={quizData.length}\r\n          correctAnswers={correctAnswers}\r\n          timeTakesToComplete={this.timeTakesToComplete}\r\n          questionsAndAnswers={questionsAndAnswers}\r\n          retakeQuiz={this.retakeQuiz}\r\n          backToHome={backToHome}\r\n        />\r\n      );\r\n\r\n      this.setState({ resultRef, questionsAndAnswers: [] });\r\n    }, 2000);\r\n  }\r\n\r\n  retakeQuiz() {\r\n    // console.log('Retake quiz func');\r\n    const { quizData, questionIndex } = this.state;\r\n    const outPut = getRandomNumber(0, 3);\r\n    const options = [...quizData[questionIndex].incorrect_answers];\r\n    options.splice(outPut, 0, quizData[questionIndex].correct_answer);\r\n\r\n    this.setState({\r\n      correctAnswers: 0,\r\n      quizIsCompleted: false,\r\n      startNewQuiz: true,\r\n      options,\r\n      outPut\r\n    });\r\n  }\r\n\r\n  startNewQuiz() {\r\n    setTimeout(() => {\r\n      this.setState({ isLoading: false, startNewQuiz: false, resultRef: null });\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      quizData,\r\n      questionIndex,\r\n      options,\r\n      userSlectedAns,\r\n      isLoading,\r\n      quizIsCompleted,\r\n      resultRef,\r\n      startNewQuiz,\r\n      isOffline\r\n      // outPut,\r\n      // correctAnswers,\r\n    } = this.state;\r\n\r\n    // console.log(userSlectedAns);\r\n    // console.log(questionIndex, outPut);\r\n    // console.log('Score ==>', correctAnswers);\r\n\r\n    if (quizIsCompleted && !resultRef) {\r\n      this.renderResult();\r\n      // console.log('Redirecting to result');\r\n    }\r\n\r\n    if (startNewQuiz) {\r\n      this.startNewQuiz();\r\n    }\r\n\r\n    return (\r\n      <Item.Header>\r\n        {!isOffline && !quizIsCompleted && isLoading && <Loader />}\r\n\r\n        {!isOffline && !isLoading && (\r\n          <Container>\r\n            <Segment>\r\n              <Item.Group divided>\r\n                <Item>\r\n                  <Item.Content>\r\n                    <Item.Extra>\r\n                      <Header as=\"h1\" block floated=\"left\">\r\n                        <Icon name=\"info circle\" />\r\n                        <Header.Content>\r\n                          {`Question No.${questionIndex + 1} of ${\r\n                            quizData.length\r\n                          }`}\r\n                        </Header.Content>\r\n                      </Header>\r\n                      <Countdown\r\n                        countdownTime={this.props.countdownTime}\r\n                        timesUp={this.timesUp}\r\n                        timeAmount={this.timeAmount}\r\n                      />\r\n                    </Item.Extra>\r\n                    <br />\r\n                    <Item.Meta>\r\n                      <Message size=\"huge\" floating>\r\n                        <b>{`Q. ${he.decode(\r\n                          quizData[questionIndex].question\r\n                        )}`}</b>\r\n                      </Message>\r\n                      <br />\r\n                      <Item.Description>\r\n                        <h3>Please choose one of the following answers:</h3>\r\n                      </Item.Description>\r\n                      <Divider />\r\n                      <Menu vertical fluid size=\"massive\">\r\n                        {options.map((option, i) => {\r\n                          let letter;\r\n\r\n                          switch (i) {\r\n                            case 0:\r\n                              letter = 'A.';\r\n                              break;\r\n                            case 1:\r\n                              letter = 'B.';\r\n                              break;\r\n                            case 2:\r\n                              letter = 'C.';\r\n                              break;\r\n                            case 3:\r\n                              letter = 'D.';\r\n                              break;\r\n                            default:\r\n                              letter = i;\r\n                              break;\r\n                          }\r\n\r\n                          const decodedOption = he.decode(option);\r\n\r\n                          return (\r\n                            <Menu.Item\r\n                              key={decodedOption}\r\n                              name={decodedOption}\r\n                              active={userSlectedAns === decodedOption}\r\n                              onClick={this.handleItemClick}\r\n                            >\r\n                              <b style={{ marginRight: '8px' }}>{letter}</b>\r\n                              {decodedOption}\r\n                            </Menu.Item>\r\n                          );\r\n                        })}\r\n                      </Menu>\r\n                    </Item.Meta>\r\n                    <Divider />\r\n                    <Item.Extra>\r\n                      {userSlectedAns ? (\r\n                        <Button\r\n                          primary\r\n                          content=\"Next\"\r\n                          onClick={this.handleNext}\r\n                          floated=\"right\"\r\n                          size=\"big\"\r\n                          icon=\"right chevron\"\r\n                          labelPosition=\"right\"\r\n                        />\r\n                      ) : (\r\n                        <Button\r\n                          disabled\r\n                          primary\r\n                          content=\"Next\"\r\n                          floated=\"right\"\r\n                          size=\"big\"\r\n                          icon=\"right chevron\"\r\n                          labelPosition=\"right\"\r\n                        />\r\n                      )}\r\n                    </Item.Extra>\r\n                  </Item.Content>\r\n                </Item>\r\n              </Item.Group>\r\n            </Segment>\r\n            <br />\r\n          </Container>\r\n        )}\r\n\r\n        {quizIsCompleted && !resultRef && (\r\n          <Loader text=\"Getting your result.\" />\r\n        )}\r\n\r\n        {quizIsCompleted && resultRef}\r\n\r\n        {isOffline && <Offline />}\r\n      </Item.Header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","import React, { Component, Fragment } from 'react';\r\n\r\nimport Header from '../Header';\r\nimport Main from '../Main';\r\nimport Loader from '../Loader';\r\nimport Quiz from '../Quiz';\r\n\r\nimport { PATH_BASE, AMOUNT } from '../../api';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isQuizStart: false,\r\n      API: null,\r\n      countdownTime: null,\r\n      isLoading: false\r\n    };\r\n\r\n    this.startQuiz = this.startQuiz.bind(this);\r\n    this.backToHome = this.backToHome.bind(this);\r\n  }\r\n\r\n  startQuiz(selectedValues) {\r\n    const { numOfQ, time } = selectedValues;\r\n\r\n    const API = PATH_BASE+'/'+numOfQ;\r\n\r\n    this.setState({ isQuizStart: true, API, countdownTime: time });\r\n  }\r\n\r\n  backToHome() {\r\n    this.setState({ isLoading: true });\r\n\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isQuizStart: false,\r\n        API: null,\r\n        countdownTime: null,\r\n        isLoading: false\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    const { isQuizStart, API, countdownTime, isLoading } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <Header />\r\n        {!isLoading && !isQuizStart && <Main startQuiz={this.startQuiz} />}\r\n        {!isLoading && isQuizStart && (\r\n          <Quiz\r\n            API={API}\r\n            countdownTime={countdownTime}\r\n            backToHome={this.backToHome}\r\n          />\r\n        )}\r\n        {isLoading && <Loader />}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import Swal from 'sweetalert2';\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          // console.log(\r\n          //   'This web app is being served cache-first by a service worker.'\r\n          // );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              // console.log(\r\n              //   'New content is available and will be used when all ' +\r\n              //     'tabs for this page are closed.'\r\n              // );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              // console.log('Content is cached for offline use.');\r\n              Swal.fire({\r\n                toast: 'true',\r\n                position: 'bottom',\r\n                type: 'success',\r\n                title: 'App is ready to work offline.',\r\n                showConfirmButton: false,\r\n                timer: 6000\r\n              });\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      // console.log(\r\n      //   'No internet connection found. App is running in offline mode.'\r\n      // );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}